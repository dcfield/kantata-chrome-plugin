# Technical Requirements Document: Activate Fixed Fee Plugin

## 1. Overview
This Chrome extension feature adds a persistent banner that displays project cost calculations with adjustable margin percentages for project management interfaces.

## 2. Feature Toggle

### 2.1 Plugin Settings
- **Requirement**: Add checkbox in Chrome extension popup menu
- **Label**: "Activate Fixed Fee Plugin"
- **Behavior**: 
  - Checked = Feature active, banner visible
  - Unchecked = Feature inactive, banner hidden
- **Default State**: Unchecked

## 3. Banner Implementation

### 3.1 Banner Positioning & Styling
- **Position**: Fixed at top of browser viewport
- **Z-index**: High value (10000) to ensure visibility above all page content
- **Background**: Orange gradient (`linear-gradient(135deg, #ff8c00 0%, #ff7f00 100%)`)
- **Width**: Full viewport width
- **Height**: Auto-adjust to content (approx. 48px)
- **Layout**: Left-aligned horizontal arrangement with 20px gaps
- **Body Adjustment**: Automatically adds top margin to prevent content overlap

### 3.2 Banner Visibility
- **Show Condition**: Plugin checkbox is enabled
- **Hide Condition**: Plugin checkbox is disabled
- **Persistence**: Always visible when enabled (no dismiss option)

## 4. Data Extraction

### 4.1 Source Element Detection
- **Target Element**: Div containing "Est. Cost" with dynamic class names
- **Selection Strategy**: Use `data-testid` attribute for reliability:
  ```html
  [data-testid="Total estimated cost (Resource Estimated Hours * Cost Rate) of named and unnamed resource assignments on this project."]
  ```
- **Fallback Strategy**: If testid unavailable, search for div containing "Est. Cost" header text

### 4.2 Value Processing
- **Extract From**: `.summary-bar_summary-item__content--[randomID]` child element
- **Format Conversion**: 
  - Remove `&nbsp;` characters
  - Remove currency symbols (â‚¬, Â£, $)
  - Remove thousand separators (spaces, commas)
  - Convert to numeric value
- **Currency Detection**: Preserve original currency symbol for display formatting

### 4.3 Error Handling
- **Missing Element**: Display "Cannot find the Estimated Cost on this page"
- **Invalid Value**: Display "Unable to parse cost value"
- **Network Issues**: Retry extraction after 2 seconds

## 5. Banner Components

### 5.1 Estimated Cost Display
- **Label**: "Estimated Cost:"
- **Value**: Extracted cost in original currency format
- **Position**: Left side of banner
- **Update Trigger**: Page load and DOM changes

### 5.2 Percentage Input Control
- **Type**: HTML number input with spinner controls
- **Range**: Unlimited (no min/max constraints in final implementation)
- **Default Value**: 45%
- **Step Size**: 1% (integer values)
- **Input Methods**:
  - Manual text entry
  - Increment/decrement buttons
  - Keyboard up/down arrows
- **Position**: Left-center of banner (within input section)
- **Label**: "Margin %:"
- **Styling**: 80px width, white background with orange border focus
- **Calculate Button**: "Calculate Fee" button to trigger fee calculation

### 5.3 Calculated Fee Input Control
- **Type**: HTML number input (editable, bidirectional)
- **Label**: "Estimated Fee with Margin:"
- **Calculation**: `Estimated Cost Ã— (1 + Percentage/100)` (forward direction)
- **Reverse Calculation**: `((Target Fee / Estimated Cost) - 1) Ã— 100` (backward direction)
- **Rounding**: Fee rounded to whole numbers, percentage to 1 decimal place
- **Position**: Right side of banner (editable input field)
- **Update Trigger**: Manual via "Calculate Margin" button
- **Styling**: 120px width, white background with orange border focus
- **Calculate Button**: "Calculate Margin" button to trigger percentage calculation

## 6. Manual Calculation System

### 6.1 Calculate Fee (Forward Direction)
- **User Action**: Enter percentage â†’ Click "Calculate Fee" button
- **Calculation**: `Estimated Cost Ã— (1 + Percentage/100)`
- **Example**: Cost â‚¬100,000 + 15% margin â†’ Click button â†’ Fee â‚¬115,000

### 6.2 Calculate Margin (Reverse Direction)
- **User Action**: Enter target fee â†’ Click "Calculate Margin" button  
- **Calculation**: `((Target Fee / Estimated Cost) - 1) Ã— 100`
- **Example**: Cost â‚¬100,000, Target â‚¬120,000 â†’ Click button â†’ Margin 20%

### 6.3 Calculation Examples

#### Forward Calculation (Percentage â†’ Fee)
- **Estimated Cost**: 209,536 â‚¬
- **Margin**: 10%
- **Result**: 230,490 â‚¬ (209,536 Ã— 1.1 = 230,489.6, rounded to 230,490)

#### Reverse Calculation (Fee â†’ Percentage)
- **Estimated Cost**: 209,536 â‚¬
- **Target Fee**: 157,152 â‚¬
- **Result**: -25.0% ((157,152 / 209,536) - 1) Ã— 100 = -25%

## 7. Multi-Currency Support
- **Supported Currencies**: Euro (â‚¬), British Pound (Â£), US Dollar ($)
- **Detection Method**: Identify currency symbol in extracted value
- **Display Consistency**: Maintain original currency symbol and formatting

## 8. Technical Implementation Notes

### 8.1 DOM Monitoring
- **Observer**: MutationObserver to detect page changes
- **Scope**: Monitor entire document body with subtree observation
- **Performance**: Debounce updates (500ms) to prevent excessive recalculation
- **Triggers**: childList changes and characterData changes containing currency symbols
- **Cleanup**: Proper disconnect on banner removal

### 8.2 Data Persistence
- **Session Scope**: No persistence between page loads
- **Default Behavior**: Reset to 45% on each page load
- **State Management**: Store current values in memory only

### 8.3 Browser Compatibility
- **Target**: Chrome extension manifest v3
- **CSS**: Standard CSS with modern features (backdrop-filter, gradients)
- **JavaScript**: ES6+ features (arrow functions, destructuring, template literals)
- **APIs Used**: chrome.scripting, chrome.storage.sync, chrome.tabs
- **Injection Method**: Dynamic CSS and JS injection via scripting API

## 9. User Experience Requirements

### 9.1 Visual Feedback
- **Loading State**: Show "Loading..." while extracting cost data
- **Error State**: Clear error messaging for extraction failures
- **Manual Updates**: User-controlled calculations via button clicks
- **Button States**: Visual hover effects and disabled states for better UX

### 9.2 Accessibility
- **Keyboard Navigation**: All controls accessible via keyboard
- **Screen Readers**: Proper labeling for assistive technologies
- **Color Contrast**: Ensure text readability on orange background

## 10. Testing Scenarios

### 10.1 Functional Tests
- [ ] Plugin toggle enables/disables banner
- [ ] Cost extraction works with various number formats
- [ ] Percentage input accepts valid range (-100% to +100%)
- [ ] Calculation accuracy for positive and negative margins
- [ ] Multi-currency support (â‚¬, Â£, $)
- [ ] Error handling for missing cost elements

### 10.2 Edge Cases
- [ ] Very large cost values
- [ ] Extreme percentage values (-100%, +100%)
- [ ] Page navigation and banner persistence
- [ ] Multiple tabs with different cost values
- [ ] Rapid percentage changes (performance)

## 11. Implementation Status

### âœ… Completed Features
1. âœ… **Core Functionality**
   - Banner display with orange gradient styling
   - Cost value extraction with dual strategy (testid + fallback)
   - Bidirectional input controls (percentage â†” fee)
   - Manual calculation system with explicit user control

2. âœ… **Enhanced Features**
   - Multi-currency support (â‚¬, Â£, $) with intelligent parsing
   - Error handling with user-friendly messages
   - Visual feedback states (loading, error, success)
   - DOM monitoring with debounced performance optimization

3. âœ… **User Experience Improvements**
   - Manual "Calculate Fee" and "Calculate Margin" buttons
   - No interference while typing in input fields
   - Translucent button styling with hover effects
   - Proper disabled states when cost extraction fails

4. âœ… **Integration & Polish**
   - Chrome extension popup integration with storage sync
   - Left-aligned banner layout as requested
   - Proper cleanup and memory management
   - Body margin adjustment to prevent content overlap

### ðŸ“‚ Implementation Files
- `fixed-fee-banner.css` - Banner styling with orange gradient theme
- `fixed-fee-banner.js` - Cost extraction, calculation, and DOM monitoring logic
- `background.js` - Chrome extension integration and script injection
- `popup.html` + `popup.js` - User interface toggle controls

### ðŸ§ª Testing Status
All core functionality implemented and ready for user testing:
- [âœ…] Plugin toggle enables/disables banner
- [âœ…] Cost extraction works with testid and fallback strategies
- [âœ…] Manual calculation buttons work in both directions
- [âœ…] Bidirectional editing without input interference
- [âœ…] Multi-currency support with proper formatting
- [âœ…] Error handling for missing cost elements
- [âœ…] DOM monitoring with performance optimization
- [âœ…] Button styling and disabled states function correctly

---

*This technical requirements document has been updated to reflect the completed implementation of the "Activate Fixed Fee Plugin" feature. The feature is now ready for testing and deployment.*